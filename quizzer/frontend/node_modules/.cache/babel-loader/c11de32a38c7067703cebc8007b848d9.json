{"ast":null,"code":"import axios from'axios';//take in the user and the server\nexport var SendNewInvitation=function SendNewInvitation(to_user,to_server,token){//token authorization\naxios.defaults.headers.common[\"Authorization\"]=\"Token \"+token;//Headers\nvar config={headers:{'Content-Type':'application/json'}};//Request body\nvar notification_type=1;var post_body=JSON.stringify({to_user:to_user,to_server:to_server,notification_type:notification_type});//new url \nvar promise=axios.post('api/notification/createinvitation/',post_body,config);//render\nvar dataPromise=promise.then(function(response){return response.data;});return dataPromise;};export var ReqToJoinServer=function ReqToJoinServer(to_server,token){axios.defaults.headers.common[\"Authorization\"]=\"Token \"+token;//Headers\nvar config={headers:{'Content-Type':'application/json'}};//Request body\nvar notification_type=2;var post_body=JSON.stringify({to_server:to_server,notification_type:notification_type});var promise=axios.post('api/notification/invitation/request/',post_body,config);var dataPromise=promise.then(function(response){return response.data;});return dataPromise;};//get the notifications\nexport var getNotifications=function getNotifications(token){//get the token for authorization\naxios.defaults.headers.common[\"Authorization\"]=\"Token \"+token;//create new url\nvar promise=axios.get('api/notification/getnotifications/');//return \nvar dataPromise=promise.then(function(response){return response.data;});return dataPromise;};//post for accept invitation, needs the invitation id\nexport var postAcceptInvitation=function postAcceptInvitation(token,invitation_id){//token authorization\naxios.defaults.headers.common[\"Authorization\"]=\"Token \"+token;//create new url\nvar promise=axios.post('api/notification/invitation/'+invitation_id);var dataPromise=promise.then(function(response){return response.data;});return dataPromise;};// for deleting a notification\nexport var deleteNotification=function deleteNotification(invitation_id){//token authorization\nvar promise=axios.delete('api/notification/deletenotification/'+invitation_id);var dataPromise=promise.then(function(response){return response.data;});return dataPromise;};","map":{"version":3,"sources":["C:/Users/Stephen/OneDrive/Desktop/PD/quizzer/frontend/src/components/services/notifications.js"],"names":["axios","SendNewInvitation","to_user","to_server","token","defaults","headers","common","config","notification_type","post_body","JSON","stringify","promise","post","dataPromise","then","response","data","ReqToJoinServer","getNotifications","get","postAcceptInvitation","invitation_id","deleteNotification","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\n//take in the user and the server\r\nexport const SendNewInvitation = (to_user, to_server, token) => {\r\n    //token authorization\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\r\n\r\n    //Headers\r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json',\r\n        }\r\n    };\r\n\r\n    //Request body\r\n    let notification_type = 1;\r\n    const post_body = JSON.stringify({to_user, to_server, notification_type})\r\n    //new url \r\n    const promise = axios.post('api/notification/createinvitation/', post_body, config)\r\n    //render\r\n    const dataPromise = promise.then((response)=> response.data);\r\n    return dataPromise;\r\n};\r\n\r\n\r\nexport const ReqToJoinServer = (to_server, token) => {\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\r\n\r\n    //Headers\r\n    const config = {\r\n        headers : {\r\n            'Content-Type' : 'application/json',\r\n        }\r\n    };\r\n\r\n    //Request body\r\n    let notification_type = 2;\r\n    const post_body = JSON.stringify({to_server, notification_type})\r\n    const promise = axios.post('api/notification/invitation/request/', post_body, config)\r\n    const dataPromise = promise.then((response)=> response.data);\r\n    return dataPromise;\r\n};\r\n\r\n//get the notifications\r\nexport const getNotifications = (token) => {\r\n    //get the token for authorization\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\r\n    //create new url\r\n    const promise = axios.get('api/notification/getnotifications/');\r\n    //return \r\n    const dataPromise = promise.then((response) => response.data);\r\n    return dataPromise;\r\n};\r\n\r\n//post for accept invitation, needs the invitation id\r\nexport const postAcceptInvitation = (token, invitation_id) => {\r\n    //token authorization\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Token \" + token;\r\n    //create new url\r\n    const promise = axios.post('api/notification/invitation/' + invitation_id);\r\n    const dataPromise = promise.then((response) => response.data);\r\n    return dataPromise;\r\n};\r\n\r\n// for deleting a notification\r\nexport const deleteNotification = (invitation_id) => {\r\n    //token authorization\r\n    const promise = axios.delete('api/notification/deletenotification/' + invitation_id);\r\n    const dataPromise = promise.then((response) => response.data);\r\n    return dataPromise;\r\n}; "]},"metadata":{},"sourceType":"module"}